// Funcao de codificacao entropica retirando os 0s
struct CodifImage * codifica(struct Image *image) {
	struct CodifImage r1, r2;
	int zeros_r, zeros_b, zeros_g;
	int count_r, count_g, count_b;
	int x, y;
	
	r1.red = (int *) malloc(IMAGE_WIDTH*IMAGE_HEIGHT*sizeof(int));
	r1.green = (int *) malloc(IMAGE_WIDTH*IMAGE_HEIGHT*sizeof(int));
	r1.blue = (int *) malloc(IMAGE_WIDTH*IMAGE_HEIGHT*sizeof(int));
	
	zeros_r = zeros_b = zeros_g = 0;
	count_r = count_b = count_g = 0;
	
	for (x = 0;x < IMAGE_WIDTH;x++) {
		for (y = 0;y < IMAGE_HEIGHT;y++) {
			if (image[x*IMAGE_WIDTH + y].red == 0) {
				if (zeros_r < 1)
					r1.red[count_r++] = image[x*IMAGE_WIDTH + y].red;
				zeros_r++;
			} else {
				if (zeros_r > 0) {
					r1.red[count_r++] = zeros_r - 1;
					zeros_r = 0;
				}
				r1.red[count_r++] = image[x*IMAGE_WIDTH + y].red;
			}
			
			if (image[x*IMAGE_WIDTH + y].green == 0) {
				if (zeros_g < 1)
					r1.green[count_g++] = image[x*IMAGE_WIDTH + y].green;
				zeros_g++;
			} else {
				if (zeros_g > 0) {
					r1.green[count_g++] = zeros_g - 1;
					zeros_g = 0;
				}
				r1.green[count_g++] = image[x*IMAGE_WIDTH + y].green;
			}
			
			if (image[x*IMAGE_WIDTH + y].blue == 0) {
				if (zeros_b < 1)
					r1.blue[count_b++] = image[x*IMAGE_WIDTH + y].blue;
				zeros_b++;
			} else {
				if (zeros_b > 0) {
					r1.blue[count_b++] = zeros_b - 1;
					zeros_b = 0;
				}
				r1.blue[count_b++] = image[x*IMAGE_WIDTH + y].blue;
			}
		}
	}
	
	r2.red =  (int *) malloc(count_r*sizeof(int));
	r2.green =  (int *) malloc(count_g*sizeof(int));
	r2.blue =  (int *) malloc(count_b*sizeof(int));
	
	// memcpy
}

// Funcao de decodificacao entropica devolvendo os 0s
struct Image * decodifica(struct Image *image) {

}

// Funcao de codificacao entropica retirando os 0s
int * codifica(unsigned int *);
// Funcao de decodificacao entropica devolvendo os 0s
unsigned int * decodifica(int *);
// Aplicacao da codificacao na imagem
int * codificar(struct Image *image);
// Aplicacao da decodificacao na imagem
struct Image * decodificar(int *image);
